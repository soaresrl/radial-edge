import { DescType, Direction, Orientation } from "./definitions";
import Edge from "./edge";
import EdgeUse from "./edgeuse";
import Face from "./face";
import FaceUse from "./faceuse";
import Loop from "./loop";
import LoopUse from "./loopuse";
import Region from "./region";
import Shell from "./shell";
import Vertex from "./vertex";
import VertexUse from "./vertexuse";
declare abstract class CircularDoublyLinkedListItem {
    last: this;
    next: this;
    constructor();
    static first<T extends CircularDoublyLinkedListItem>(new_elem: T): T;
    link(new_elem: this): this;
    unlink(elem: this): this;
}
declare function fill_s_faceuse(shell: Shell, region: Region, shell_faceuse: FaceUse): void;
declare function fill_fu(fu: FaceUse, shell: Shell, mate: FaceUse, lu: LoopUse, orient: Orientation, face: Face): void;
declare function fill_lu_vertexuse(lu: LoopUse, fu: FaceUse, mate: LoopUse, loop: Loop, vu: VertexUse): void;
declare function fill_lu_edgeuse(lu: LoopUse, fu: FaceUse, mate: LoopUse, loop: Loop, eu: EdgeUse): void;
declare function fill_vu_loopuse(vu: VertexUse, v: Vertex, lu: LoopUse): void;
declare function fill_vu_edgeuse(vu: VertexUse, vertex: Vertex, eu: EdgeUse): void;
declare function fill_vu_shell(vu: VertexUse, vertex: Vertex, shell: Shell): void;
declare function fill_eu_shell(eu: EdgeUse, vu: VertexUse, mate: EdgeUse, edge: Edge, shell: Shell, orient: Orientation): void;
declare function fill_eu_loopuse(eu: EdgeUse, vu: VertexUse, mate: EdgeUse, edge: Edge, lu: LoopUse, cw: EdgeUse | null, ccw: EdgeUse | null, radial: EdgeUse, orient: Orientation): void;
declare function for_all_eu_in_lu(head: EdgeUse, operation: (eu: EdgeUse) => void): void;
declare function link_vu(new_vu: VertexUse, v_parent: Vertex, vu_type: DescType, e_parent: Edge | null, loop_parent: Loop | null): void;
declare function link_wing(v: Vertex, e: Edge, dir: Direction, lu: LoopUse, eu1: EdgeUse, eu2: EdgeUse, eu3: EdgeUse, eu4: EdgeUse, m_ev: boolean): void;
export { CircularDoublyLinkedListItem, fill_s_faceuse, fill_fu, fill_lu_vertexuse, fill_lu_edgeuse, fill_vu_loopuse, fill_vu_edgeuse, fill_vu_shell, fill_eu_shell, fill_eu_loopuse, for_all_eu_in_lu, link_vu, link_wing };
